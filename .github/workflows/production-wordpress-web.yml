# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy container app to Azure Web App - staging-wordpress-web

on:
  push:
    branches:
      - production
      - staging
  workflow_dispatch:
env:
  CLIENT_ID: "691e28fa-9381-4c5b-a870-02c9e2ffcc28"
  TENANT_ID: "3749a395-c740-4801-8489-fcc2a48bb213"
  SUBSCRIPTION_ID: "834fb527-964a-4896-adea-fdf69d507e95"
  REGISTRY: nybce.azurecr.io
  IMAGE_NAME: nybc-wordpress
jobs:
  build:
    runs-on: 'ubuntu-latest'
    outputs:
      outcome: '${{ steps.build-and-push.outcome }}'
      sha_tag: '${{ steps.clip-sha-tag.outputs.sha_tag }}'
    steps:
    - uses: actions/checkout@v2
    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ env.CLIENT_ID }}","clientSecret":"${{ secrets.PRODUCTION_CLIENT_SECRET }}","subscriptionId":"${{ env.SUBSCRIPTION_ID }}","tenantId":"${{ env.TENANT_ID }}"}'
    - name: Get ACR Auth Token
      run: |
        set -euo pipefail
        access_token=$(az account get-access-token --query accessToken -o tsv)
        refresh_token=$(curl https://$REGISTRY/oauth2/exchange -v -d "grant_type=access_token&service=$REGISTRY&access_token=$access_token" | jq -r .refresh_token)
        echo "ACR_LOGIN_TOKEN=$refresh_token" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: '00000000-0000-0000-0000-000000000000'
        password: ${{ env.ACR_LOGIN_TOKEN }}

    - name: Docker meta
      uses: docker/metadata-action@v4
      id: meta
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,enable=true,prefix=${{ github.ref_name }}sha-,format=short

    - name: Get ShaTag
      id: get-sha-tag
      uses: edwardgeorge/jq-action@v1
      with:
        input: ${{ steps.meta.outputs.json }}
        script: '.tags[-1]'
        compact: true
        
    - name: Build and push container image to registry
      uses: docker/build-push-action@v2
      with:
        file: ./docker/wp.server.Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        cache-to: type=inline
        build-args: |
          ACF_PRO_KEY=${{ secrets.ACF_PRO_KEY }}
          ENVIRONMENT=${{ github.ref_name }}
        secrets: |
          "vaultpass=${{ secrets.VAULTPASS }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.ref_name }}

    steps:
    - shell: python
      id: generate-overrides
      run: |

        publish_profile = {
          'production': "${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_PRODUCTION }}",
          'staging': "${{ secrets.AzureAppService_PublishProfile_1bea6965de524725b091c49317217825 }}"
        }
        with open(os.environ['GITHUB_OUTPUT'], "a") as output_file:
          output_file.write("PUBLISHPROFILE={}".format( publish_profile[${{ github.ref_name }}] ))

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: '${{ github.ref_name }}-wordpress-web'
        slot-name: 'production'
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_PRODUCTION }}
        images: '${{ steps.get-sha-tag.outputs.output }}'
